[gd_scene load_steps=8 format=3 uid="uid://dpank6hte8prf"]

[ext_resource type="Texture2D" uid="uid://q5nujothn2y6" path="res://art/playerGrey_up1.png" id="1_voh7f"]
[ext_resource type="Texture2D" uid="uid://cya4cxjs4sv07" path="res://art/playerGrey_up2.png" id="2_gngm3"]
[ext_resource type="Texture2D" uid="uid://iydh8rgfcjcd" path="res://art/playerGrey_walk1.png" id="3_tfmus"]
[ext_resource type="Texture2D" uid="uid://cmyctdxxewr7d" path="res://art/playerGrey_walk2.png" id="4_rdget"]

[sub_resource type="GDScript" id="GDScript_lc38d"]
script/source = "extends Area2D
signal hit

@export var speed = 400 # pixels/sec
var screen_size # game window size

# Called when the node enters the scene tree for the first time.
func _ready():
	screen_size = get_viewport_rect().size
	hide()


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	var velocity = Vector2.ZERO # Player's movement vector = (0, 0)
	if Input.is_action_pressed(\"move_right\"):
		velocity.x += 1
	if Input.is_action_pressed(\"move_left \"):
		velocity.x -= 1
	if Input.is_action_pressed(\"move_down\"):
		velocity.y += 1
	if Input.is_action_pressed(\"move_up\"):
		velocity.y -= 1

	if velocity.length() > 0: # Vector is not (0, 0) anymore
		'''
			Normalizing a vector means reducing its
		length to 1 while preserving its direction. This is done
		by dividing each of its components by its magnitude.
			This means that we set its length to 1, then multiply by the
		desired speed. 
			With a normalized vector there is no more fast diag movement.
		'''
		# Resulting vector could be (1, 1) == right+down:
		velocity = velocity.normalized() * speed
		# '$' is shorthand for 'get_node()'
		$AnimatedSprite2D.play()
		# The same as 'get_node(\"AnimatedSprite2D\").play()'
	else:
		$AnimatedSprite2D.stop()
	
	# Delta == frame length - time delta the previous frame took to complete;
	# Using this value ensures that your movement remain consistent in uneven frame rates
	position += velocity * delta
	position = position.clamp(Vector2.ZERO, screen_size)
	
	if velocity.x != 0:
		$AnimatedSprite2D.animation = \"walk\"
		$AnimatedSprite2D.flip_v = false
		$AnimatedSprite2D.flip_h = velocity.x < 0 # Boolean assignment
	elif velocity.y != 0:
		$AnimatedSprite2D.animation = \"up\"
		$AnimatedSprite2D.flip_v = velocity.y > 0


func _on_body_entered(body):
	hide() # Player disappears afeter being hit
	hit.emit()
	# Must be deferred, because we can't change physics properties on a physics callback
	$CollisionShape2D.set_deferred(\"disabled\", true)


func start(pos):
	position = pos
	show()
	$CollisionShape2D.disabled = false
"

[sub_resource type="SpriteFrames" id="SpriteFrames_m3enj"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": ExtResource("1_voh7f")
}, {
"duration": 1.0,
"texture": ExtResource("2_gngm3")
}],
"loop": true,
"name": &"up",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("3_tfmus")
}, {
"duration": 1.0,
"texture": ExtResource("4_rdget")
}],
"loop": true,
"name": &"walk",
"speed": 5.0
}]

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_ud0aj"]
radius = 27.0
height = 68.0

[node name="Player" type="Area2D"]
script = SubResource("GDScript_lc38d")
metadata/_edit_group_ = true

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
scale = Vector2(0.5, 0.5)
sprite_frames = SubResource("SpriteFrames_m3enj")
animation = &"walk"

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("CapsuleShape2D_ud0aj")

[connection signal="body_entered" from="." to="." method="_on_body_entered"]
